{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(.venvScriptspython.exe -m pip install mcp-server-time)",
      "Bash(SAKANA_VENV_PYTHON=\".venv/Scripts/python.exe\" \".venv/Scripts/python.exe\" \"src/MCP PLUGINS/servers/time/agent_simplified.py\" --session-id=test456 --task=\"What is the current UTC time?\")",
      "Bash(timeout 30 python test_single_mcp_demo.py)",
      "Bash(curl -s \"http://127.0.0.1:8765/api/sessions\")",
      "Bash(python -c \"import requests; r = requests.get(''http://127.0.0.1:8765/api/sessions'', timeout=2); print(''Backend is running'' if r.status_code == 200 else f''Status: {r.status_code}'')\")",
      "Bash(timeout 40 python test_single_mcp_demo.py)",
      "Bash(python:*)",
      "Bash(curl -X POST \"http://127.0.0.1:8765/api/sessions\" -H \"Content-Type: application/json\" -d '{\"\"tool\"\":\"\"github\"\",\"\"name\"\":\"\"test-new-naming\"\"}')",
      "Bash(taskkill:*)",
      "Bash(pkill:*)",
      "Bash(tasklist:*)",
      "Bash(findstr:*)",
      "Bash(netstat:*)",
      "Bash(wmic process:*)",
      "Bash(timeout 120 python:*)",
      "Bash(timeout 60 python:*)",
      "Bash(timeout 180 python run_all_e2e_tests.py)",
      "Bash(npm run build:*)",
      "Bash(curl -X POST \"http://127.0.0.1:8765/api/sessions\" -H \"Content-Type: application/json\" -d \"{\"\"tool\"\":\"\"time\"\",\"\"name\"\":\"\"test-modal-display\"\",\"\"model\"\":\"\"claude-3-5-sonnet-20241022\"\"}\")",
      "Bash(curl -X POST \"http://127.0.0.1:8765/api/sessions\" -H \"Content-Type: application/json\" -d \"{\"\"tool\"\":\"\"time\"\",\"\"name\"\":\"\"test-final-response-modal\"\",\"\"model\"\":\"\"openai/gpt-4o-mini\"\"}\")",
      "Bash(for dir in */)",
      "Bash(do agent=\"$dir%/\")",
      "Bash(if [ -f \"$agent/agent.py\" ])",
      "Bash(then if grep -q \"SESSION_ANNOUNCE\" \"$agent/agent.py\")",
      "Bash(then echo \"‚úÖ $agent - Has SESSION_ANNOUNCE\")",
      "Bash(else echo \"‚ùå $agent - MISSING SESSION_ANNOUNCE\")",
      "Bash(fi)",
      "Bash(done)",
      "Bash(timeout:*)",
      "Bash(curl -X POST \"http://127.0.0.1:8765/api/sessions\" -H \"Content-Type: application/json\" -d \"{\"\"tool\"\":\"\"memory\"\",\"\"name\"\":\"\"test-session-announce-verification\"\",\"\"model\"\":\"\"openai/gpt-4o-mini\"\",\"\"task\"\":\"\"Create an entity named TestEntity with observation: Testing SESSION_ANNOUNCE pattern\"\"}\")",
      "Bash(curl -X POST \"http://127.0.0.1:8765/api/sessions/HmNPz-b1AHGoBG1MYs1Djg/start\")",
      "Bash(curl -X POST \"http://127.0.0.1:8765/api/sessions\" -H \"Content-Type: application/json\" -d \"{\"\"tool\"\":\"\"memory\"\",\"\"name\"\":\"\"test-memory-routing-fix\"\",\"\"model\"\":\"\"openai/gpt-4o-mini\"\",\"\"task\"\":\"\"Create entity TestMemory\"\"}\")",
      "Bash(curl -X POST \"http://127.0.0.1:8765/api/sessions\" -H \"Content-Type: application/json\" -d \"{\"\"tool\"\":\"\"memory\"\",\"\"name\"\":\"\"test-memory-fix\"\",\"\"model\"\":\"\"openai/gpt-4o-mini\"\"}\")",
      "Bash(.venv/Scripts/python.exe src/main.py:*)",
      "Bash(curl -X POST \"http://127.0.0.1:8765/api/sessions\" -H \"Content-Type: application/json\" -d '{\"\"\"\"tool\"\"\"\":\"\"\"\"memory\"\"\"\",\"\"\"\"name\"\"\"\":\"\"\"\"test-memory-routing\"\"\"\",\"\"\"\"model\"\"\"\":\"\"\"\"openai/gpt-4o-mini\"\"\"\"}')",
      "Bash(curl -X POST \"http://127.0.0.1:8765/api/sessions\" -H \"Content-Type: application/json\" -d '{\"\"tool\"\":\"\"memory\"\",\"\"name\"\":\"\"test-memory-routing\"\",\"\"model\"\":\"\"openai/gpt-4o-mini\"\"}')",
      "Bash(curl -X POST \"http://127.0.0.1:8765/api/sessions\" -H \"Content-Type: application/json\" -d '{\"\"\"\"tool\"\"\"\":\"\"\"\"memory\"\"\"\",\"\"\"\"name\"\"\"\":\"\"\"\"test-memory-routing-fixed\"\"\"\",\"\"\"\"model\"\"\"\":\"\"\"\"openai/gpt-4o-mini\"\"\"\"}')",
      "Bash(tee:*)",
      "Bash(cat:*)",
      "Bash(for:*)",
      "Bash(do echo \"=== $log ===\")",
      "Bash(curl -X POST \"http://127.0.0.1:8765/api/sessions\" -H \"Content-Type: application/json\" -d '{\"\"\"\"tool\"\"\"\":\"\"\"\"memory\"\"\"\",\"\"\"\"name\"\"\"\":\"\"\"\"test-memory-fixed\"\"\"\",\"\"\"\"model\"\"\"\":\"\"\"\"openai/gpt-4o-mini\"\"\"\",\"\"\"\"task\"\"\"\":\"\"\"\"Create entity TestMemory with observation: Testing fixed SESSION_ANNOUNCE\"\"\"\"}')",
      "Bash(curl -s -X POST \"http://127.0.0.1:8765/api/sessions\" -H \"Content-Type: application/json\" -d '{\"\"\"\"tool\"\"\"\":\"\"\"\"memory\"\"\"\",\"\"\"\"name\"\"\"\":\"\"\"\"test-memory-fixed\"\"\"\",\"\"\"\"model\"\"\"\":\"\"\"\"openai/gpt-4o-mini\"\"\"\",\"\"\"\"task\"\"\"\":\"\"\"\"Create entity TestMemory\"\"\"\"}')",
      "Bash(curl -s -X POST \"http://127.0.0.1:8765/api/sessions/PKUJ5F1D8qU6q6_m32lL4w/start\")",
      "Bash(curl -s \"http://127.0.0.1:8765/api/sessions/PKUJ5F1D8qU6q6_m32lL4w\")",
      "Bash(curl -s -X POST \"http://127.0.0.1:8765/api/sessions\" -H \"Content-Type: application/json\" -d '{\"\"\"\"tool\"\"\"\":\"\"\"\"memory\"\"\"\",\"\"\"\"name\"\"\"\":\"\"\"\"test-memory-final\"\"\"\",\"\"\"\"model\"\"\"\":\"\"\"\"openai/gpt-4o-mini\"\"\"\",\"\"\"\"task\"\"\"\":\"\"\"\"Create entity FinalTest with observation: Memory agent fully fixed\"\"\"\"}')",
      "Bash(curl -s -X POST \"http://127.0.0.1:8765/api/sessions/ZOcX7MLSDqcPSzAYKs6sCw/start\")",
      "Bash(curl -s \"http://127.0.0.1:8765/api/sessions/ZOcX7MLSDqcPSzAYKs6sCw\")",
      "Bash(while read log)",
      "Bash(curl -s -X POST \"http://127.0.0.1:8765/api/sessions\" -H \"Content-Type: application/json\" -d '{\"\"tool\"\":\"\"desktop\"\",\"\"name\"\":\"\"verify-desktop-announce\"\",\"\"model\"\":\"\"openai/gpt-4o-mini\"\",\"\"task\"\":\"\"List running processes\"\"}')",
      "Bash(docker:*)",
      "Bash(curl:*)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: Add comprehensive learning system documentation and MCP agent infrastructure\n\nMajor additions:\n- CLAUDE.md: Complete development guide for Claude Code integration\n- MOIRE_INTEGRATION_PLAN.md: Desktop automation via evolutionary learning\n- Learning system docs: LEARNING_QUICKSTART.md, LEARNING_INTEGRATION_GUIDE.md\n- MCP agent documentation: SESSION_ANNOUNCE patterns, architecture status\n\nMCP Infrastructure:\n- 18 MCP server agents: GitHub, Docker, Playwright, Desktop, Memory, etc.\n- Shared utilities in src/MCP PLUGINS/servers/shared/\n- Event broadcasting and session management\n- Society of Mind multi-agent patterns\n\nGUI Refactor:\n- Modular GUI structure in src/gui/ (from monolithic 2824-line file)\n- Session management in src/ui/mcp_session_manager.py\n- React components for MCP session viewing\n- SSE broker for live updates\n\nLearning Systems:\n- MCPToolLearner for telemetry-driven tool selection\n- Knowledge accumulator for permanent cross-session learning\n- Evolutionary learner with genetic algorithms\n- Pattern detection and reinforcement learning\n\nConfiguration:\n- OpenRouter integration with dev/prod modes\n- Environment variable support (.env.example)\n- Extended config.yaml with MCP session settings\n\nü§ñ Generated with Claude Code\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git push:*)",
      "Bash(git config:*)",
      "Bash(git remote set-url:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(git commit:*)",
      "Bash(git checkout:*)",
      "Read(//c/Users/User/Desktop/Moire/build/**)",
      "Read(//c/Users/User/Desktop/Moire/**)",
      "Read(//c/Users/User/Desktop/**)",
      "Bash(git submodule:*)",
      "Bash(git rm:*)",
      "Bash(.venvScriptsactivate)",
      "Bash(pip install:*)",
      "Bash(.venv/Scripts/python -m pip install:*)",
      "Bash(.venv/Scripts/python:*)",
      "Bash(git stash:*)",
      "Bash(git pull:*)",
      "Bash(git fetch:*)",
      "Bash(git log:*)",
      "Bash(.venv/Scripts/python.exe -m pytest tests/test_evolutionary_meta_learning.py -v)",
      "Bash(xargs rm:*)"
    ],
    "deny": [],
    "ask": []
  }
}
